;
; global custom
;
[custom]
build_flags =
  ${KNX_TP.build_flags}
  -D SERIAL_DEBUG=Serial
  -fexceptions
  -D KNX_IP_LAN

[develop]
extends = RP2040_develop, custom
build_flags =
  ${RP2040_develop.build_flags}
  ${custom.build_flags}
  ;-D OPENKNX_HEARTBEAT
   -D OPENKNX_HEARTBEAT_PRIO
  ; -D OPENKNX_RTT
  ; -D BUFFER_SIZE_UP=10240
  ; -D DEBUG_LOOP_TIME=10 ; will print a info when a loop took more than x ms.
  ; -D LOGIC_TRACE
  ; ; to see trace logs, they must match one of the 5 filters (TRACE_LOG1 .. TRACE_LOG2)
  ; "-D OPENKNX_TRACE1=Common.*"
  ; "-D OPENKNX_TRACE3=DummyChannel<1>"
  ; "-D OPENKNX_TRACE4=DummyChannel<[3-5]>"
  ;-D KNX_LOG_COUPLER
  ;-D KNX_LOG_IP
  ;-D KNX_LOG_TUNNELING
  -D KNX_IP_W5500
  -D OPENKNX_RUNTIME_STAT
  -D OPENKNX_RUNTIME_STAT_BUCKETN=10
  "-D OPENKNX_RUNTIME_STAT_BUCKETS=5000, 6000, 7000, 8000, 10000, 15000, 30000, 50000, 100000"


; this config block is for specifing options that are valid for all release builds
[releases]
extends = RP2040_releases, custom
build_flags =
  ${RP2040_releases.build_flags}
  ${custom.build_flags}
  -D BETAXML
  -D KNX_IP_W5500


; ------ PiPico ------
[env:develop_PIPICO]
extends = develop, RP2040_2MB, RP2040_EXCHANGE_2MB
build_flags =
   ${develop.build_flags}
   ${RP2040_EXCHANGE_2MB.build_flags}
  -D BOARD_PIPICO

[env:develop_PIPICO_USB]
extends = RP2040_UPLOAD_USB, env:develop_PIPICO

[env:develop_PIPICO_JLINK]
extends = UPLOAD_JLINK, env:develop_PIPICO


; ------ REG1-Eth ------
[env:develop_REG1_ETH]
extends = develop, RP2040_16MB, RP2040_EXCHANGE_16MB
build_flags =
   ${develop.build_flags}
   ${RP2040_EXCHANGE_16MB.build_flags}
  -D BOARD_REG1_ETH

[env:develop_REG1_ETH_USB]
extends = RP2040_UPLOAD_USB, env:develop_REG1_ETH

[env:develop_REG1_ETH_JLINK]
extends = UPLOAD_JLINK, env:develop_REG1_ETH


; ------ REG1-Eth V1------
[env:develop_REG1_ETH_V1]
extends = develop, RP2040_16MB, RP2040_EXCHANGE_16MB
build_flags =
   ${develop.build_flags}
   ${RP2040_EXCHANGE_16MB.build_flags}
  -D BOARD_REG1_ETH_V1
 # -D KNX_IP_GENERIC
 -D KNX_IP_W5500

[env:develop_REG1_ETH_V1_USB]
extends = RP2040_UPLOAD_USB, env:develop_REG1_ETH_V1

[env:develop_REG1_ETH_V1_JLINK]
extends = UPLOAD_JLINK, env:develop_REG1_ETH_V1

[env:beta_REG1_ETH_V1_USB]
extends = RP2040_UPLOAD_USB, env:develop_REG1_ETH_V1
build_flags =
   ${env:develop_REG1_ETH_V1.build_flags}
   -D BETAXML

; ------ W5500-EVB-Pico ------
[env:develop_W5500_EVB_PICO]
extends = develop, RP2040_2MB, RP2040_EXCHANGE_2MB
build_flags =
   ${develop.build_flags}
   ${RP2040_EXCHANGE_2MB.build_flags}
  -D BOARD_W5500_EVB_PICO
  -D KNX_IP_W5500

[env:develop_W5500_EVB_PICO_USB]
extends = RP2040_UPLOAD_USB, env:develop_W5500_EVB_PICO

[env:develop_W5500_EVB_PICO_JLINK]
extends = UPLOAD_JLINK, env:develop_W5500_EVB_PICO


; ------ PiPicoW ------
[env:develop_PIPICOW]
extends = develop, RP2040_2MB, RP2040_EXCHANGE_2MB
board = rpipicow
build_flags =
   ${develop.build_flags}
   ${RP2040_EXCHANGE_2MB.build_flags}
  -D BOARD_PIPICOW
  -D KNX_IP_WIFI

[env:develop_PIPICOW_USB]
extends = RP2040_UPLOAD_USB, env:develop_PIPICOW

[env:develop_PIPICOW_JLINK]
extends = UPLOAD_JLINK, env:develop_PIPICOW



; ; Releases
[env:release_REG1_ETH]
extends = releases, RP2040_16MB, RP2040_EXCHANGE_16MB
build_flags =
   ${releases.build_flags}
   ${RP2040_EXCHANGE_16MB.build_flags}
  -D BOARD_REG1_ETH

[env:release_REG1_ETH_V1]
extends = releases, RP2040_16MB, RP2040_EXCHANGE_16MB
build_flags =
   ${releases.build_flags}
   ${RP2040_EXCHANGE_16MB.build_flags}
  -D BOARD_REG1_ETH_V1

; ESP32
[develop_ESP]
extends = custom, ESP32_develop
build_flags =
  ${custom.build_flags}
  ${ESP32_develop.build_flags}
  -D OPENKNX_HEARTBEAT
  -D OPENKNX_USB_EXCHANGE_IGNORE
  -D OPENKNX_FILE_TRANSFER_IGNORE
  ; ; -D OPENKNX_HEARTBEAT_PRIO
  ; -D DEBUG_LOOP_TIME=10 ; will print a info when a loop took more than x ms.
  ; -D LOGIC_TRACE
  ; ; to see trace logs, they must match one of the 5 filters (TRACE_LOG1 .. TRACE_LOG2)
  "-D OPENKNX_TRACE1=IW.*"
  ;"-D OPENKNX_TRACE2=Logic.*"
  ;"-D OPENKNX_TRACE3=*.*"
  ; -D OPENKNX_RTT
  ; -D BUFFER_SIZE_UP=10240

[releases_ESP]
extends = ESP32_releases, custom
build_flags =
  ${ESP32_releases.build_flags}
  ${custom.build_flags}
  -D BETAXML
  -D OPENKNX_HEARTBEAT
  -D OPENKNX_USB_EXCHANGE_IGNORE
  -D OPENKNX_NET_IGNORE
  -D OPENKNX_FILE_TRANSFER_IGNORE
  ; ; -D OPENKNX_HEARTBEAT_PRIO
  ; -D DEBUG_LOOP_TIME=10 ; will print a info when a loop took more than x ms.
  ; -D LOGIC_TRACE
  ; ; to see trace logs, they must match one of the 5 filters (TRACE_LOG1 .. TRACE_LOG2)
  "-D OPENKNX_TRACE1=IW.*"
  ;"-D OPENKNX_TRACE2=Logic.*"
  ;"-D OPENKNX_TRACE3=*.*"
  ; -D OPENKNX_RTT
  ; -D BUFFER_SIZE_UP=10240

[ESP32_custom]
extends = ESP32, custom
build_flags =
  #-D OPENKNX_RUNTIME_STAT
  ${KNX_TP.build_flags}
  ${BASE.build_flags}
  -D KNX_IP_WIFI
  -D KNX_NETIF=WiFi
  -D OPENKNX_DUALCORE
  -D USE_ESP_ASNC_WEB_SERVER
  -std=gnu++17
 # build_flags = -std=gnu++17
  #-D AC_USE_LITTLEFS
  #-D PB_USE_LITTLEFS
  # -D USE_AUTO_CONNECT
  
build_unflags = -std=gnu++11
lib_ldf_mode = deep+ # deep+ and chain+ prevent finding WiFi.h for ESP32 builds
lib_deps = 
  ESP Async WebServer


  #  AutoConnect

; ------ AZDelivery ESP32 Dev Kit C V4 ------
[board_AZDelivery_ESP32_Dev_Kit_C_V4]
board = esp32dev
board_build.partitions = esp_partition.csv
build_flags =
  -D SERIAL_DEBUG=Serial
  -D KNX_SERIAL=Serial2
 # -D LED_BUILTIN=2
 # -D PROG_LED_PIN=LED_BUILTIN
   -D PROG_LED_PIN=18
   -D PROG_LED_PIN_ACTIVE_ON=HIGH
 # -D PROG_BUTTON_PIN=38
 -D PROG_BUTTON_PIN=10

[env:develop_AZDelivery_ESP32_Dev_Kit_C_V4]
extends = ESP32_custom, ESP32_libs, develop_ESP, board_AZDelivery_ESP32_Dev_Kit_C_V4
build_flags =
  ${ESP32_custom.build_flags}
  ${develop_ESP.build_flags}
  ${board_AZDelivery_ESP32_Dev_Kit_C_V4.build_flags}
  -D OPENKNX_NET_IGNORE
lib_deps = 
  ${ESP32_custom.lib_deps}
 
 
[env:develop_AZDelivery_ESP32_Dev_Kit_C_V4_USB]
extends = env:develop_AZDelivery_ESP32_Dev_Kit_C_V4, ESP32_UPLOAD_USB

[env:develop_AZDelivery_ESP32_Dev_Kit_C_V4_OTA]
extends = env:develop_AZDelivery_ESP32_Dev_Kit_C_V4
upload_protocol = espota
upload_port = 192.168.0.XX # IP Address

[env:beta_AZDelivery_ESP32_Dev_Kit_C_V4_USB]
extends = ESP32_custom, ESP32_libs, releases_ESP, board_AZDelivery_ESP32_Dev_Kit_C_V4, ESP32_UPLOAD_USB
build_flags =
  ${ESP32_custom.build_flags}
  ${releases_ESP.build_flags}
  ${board_AZDelivery_ESP32_Dev_Kit_C_V4.build_flags}
lib_deps = 
  ${ESP32_custom.lib_deps}

[env:beta_AZDelivery_ESP32_Dev_Kit_C_V4_OTA]
extends = ESP32_custom, ESP32_libs, releases_ESP, board_AZDelivery_ESP32_Dev_Kit_C_V4, ESP32_UPLOAD_USB
build_flags =
  ${ESP32_custom.build_flags}
  ${releases_ESP.build_flags}
  ${board_AZDelivery_ESP32_Dev_Kit_C_V4.build_flags}
lib_deps = 
  ${ESP32_custom.lib_deps}
upload_protocol = espota
upload_port = 192.168.0.XX # IP Address


; ------ REG1 ESP ------
[env:develop_REG1_ESP_DEV_TP_NET]
extends = ESP32_develop, ESP32_custom, ESP32_libs, develop_ESP, ESP32_UPLOAD_USB
build_flags =
  ${KNX_TP.build_flags}
  ${ESP32_develop.build_flags}
  ${ESP32_custom.build_flags}
  ${develop_ESP.build_flags}
  -D BOARD_REG1_ESP_DEVBOARD_V00_02
  -D CONFIG_ETH_ENABLED
  -D KNX_IP_LAN
  -UKNX_IP_WIFI
  -UKNX_NETIF
;board = esp32dev
board = adafruit_feather_esp32_v2
board_build.partitions = esp_partition_8MB.csv

; ------ Adafruit ESP32 Feather V2 ------
[board_Adafruit_Feather_ESP32_V2]
build_flags =
  -D SERIAL_DEBUG=Serial
  -D KNX_SERIAL=Serial1
  -D KNX_UART_RX_PIN=34
  -D KNX_UART_TX_PIN=25
  -D PROG_LED_PIN=LED_BUILTIN
  -D PROG_LED_PIN_ACTIVE_ON=HIGH
  -D PROG_BUTTON_PIN=38
  -D KNX_IP_WIFI
  -D KNX_NETIF=WiFi
#  -UBOARD_HAS_PSRAM
board = adafruit_feather_esp32_v2
board_build.partitions = esp_partition_8MB.csv

[env:develop_Adafruit_Feather_ESP32_V2]
extends = ESP32_custom, ESP32_libs, develop_ESP, board_Adafruit_Feather_ESP32_V2
build_flags =
  ${ESP32_custom.build_flags}
  ${develop_ESP.build_flags}
  ${board_Adafruit_Feather_ESP32_V2.build_flags}
  -D OPENKNX_NET_IGNORE
lib_deps = 
  ${ESP32_custom.lib_deps}

[env:develop_Adafruit_Feather_ESP32_V2_USB]
extends = env:develop_Adafruit_Feather_ESP32_V2, ESP32_UPLOAD_USB

[env:release_Adafruit_Feather_ESP32_V2_USB]
extends = ESP32_custom, ESP32_libs, releases_ESP, board_Adafruit_Feather_ESP32_V2, ESP32_UPLOAD_USB
build_flags =
  ${ESP32_custom.build_flags}
  ${releases_ESP.build_flags}
  ${board_Adafruit_Feather_ESP32_V2.build_flags}
lib_deps = 
  ${ESP32_custom.lib_deps}

[env:release_Adafruit_Feather_ESP32_V2_OTA]
extends = ESP32_custom, ESP32_libs, releases_ESP, board_Adafruit_Feather_ESP32_V2, ESP32_UPLOAD_USB
build_flags =
  ${ESP32_custom.build_flags}
  ${releases_ESP.build_flags}
  ${board_Adafruit_Feather_ESP32_V2.build_flags}
lib_deps = 
  ${ESP32_custom.lib_deps}
upload_protocol = espota
upload_port = 192.168.0.32 # IP Address